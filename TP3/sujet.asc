Objectif: pthread, context et scheduling basique

-Créer deux threads avec pthread. Chaque thread s'exécute indéfiniment et affiche son nom toutes les 3 secondes.
-créer un troisième thread avec pthread qui joue le rôle de scheduler. Ce dernier se reveille toutes les 5 secondes et interrope l'un des deux threads en cours d'exécution. Ensuite, il débloque le thread précédemment bloqué. Le scheduler attend 10 secondes avant de commencer son scheduler périodique.

Note:
Les threads crées avec pthread sont vus par l'OS.
Ils sont schedulés donc schedulés par le scheduler l'OS comme tout processus.
Ainsi, pendant les 10 premières secondes, où votre scheduler n'intervient pas, les deux threads vont s'exécuter en parallèle (car schedulés par le scheduler de l'OS).
Après les 10 première seconde, votre scheduler forcera une exécution alternée.

Recommandation:
-Penser évidemment à pthread_create et pthread_join
-Penser à sigaction et les signaux SIGUSR1 et SIGUSR2. SIGUSR1 peut être utilisé pour stoper le thread. (SIGSTOP ne peut pas être utilisé car il stopera toute le processus). SIGUSR2 utilisé pour le débloquer. 
-Penser à sigsuspend pour suspendre un processus
-Revoir l'exemple sigaction_exemple.c


TP noté:
-Refaire la même chose avec les contextes:
*setcontext, getcontext, makecontext, swapcontext

